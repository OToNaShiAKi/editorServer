#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('editor:server');
const http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = val => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

const onError = error => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3366');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = require('socket.io')(server);

let rooms = {}

io.on('connection', (socket) => {

  const query = socket.handshake.query;
  if (query.examiner)
    socket.join(socket.id, () => {
      const TOKEN = socket.id
      rooms[TOKEN] = {
        examiner: query.examiner
      }
      io.to(TOKEN).emit('open', {
        message: '建立房间成功',
        status: 200,
        data: {
          room: socket.id
        }
      })
      socket.on('disconnect', () => {
        delete rooms[TOKEN];
        io.to(TOKEN).emit('open', {
          status: 500,
          message: '面试官已关闭房间',
          data: {
            examiner: ''
          }
        });
      })
      socket.on('question', question => {
        io.to(TOKEN).emit('question', question)
      })
      socket.on('examiner', code => {
        io.to(TOKEN).emit('examiner', code)
      })
    });
  else if (query.token && rooms[query.token] && !rooms[query.token].examinee)
    socket.join(query.token, () => {
      const TOKEN = query.token
      rooms[TOKEN].examinee = query.examinee;
      io.to(TOKEN).emit('open', {
        message: '考生连接成功',
        status: 200,
        data: {
          examinee: query.examinee,
          examiner: rooms[query.token].examiner,
          codes: rooms[query.token].codes
        }
      })
      socket.on("visibility", status => {
        io.to(TOKEN).emit('visibility', status)
      })
      socket.on('examinee', code => {
        io.to(TOKEN).emit('examinee', code)
      })
      socket.on('disconnect', () => {
        if (rooms[TOKEN]) rooms[query.token].examinee = '';
        io.to(TOKEN).emit('open', {
          status: 200,
          message: '考生已退出房间',
          data: {
            examinee: ''
          }
        });
      })
    })
  else io.to(socket.id).emit('open', {
    status: 500,
    message: '连接不存在或已被连接'
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);